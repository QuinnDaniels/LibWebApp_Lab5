@page "/borrowMenu"
@using LibWebApp_L5_v4.Models
@using LibWebApp_L5_v4.Services

@inject ILibServ libby
@inject NavigationManager nav

<style>
    .MyHighlightClass
    {
        background-color: darkslateblue;
        text-decoration-color:azure;
        color:whitesmoke;
        text-decoration:underline;
        
    }


    .flex_container {
        display: flex; /* or inline-flex */
        flex-direction: row;
        flex-wrap: nowrap;
        align-items: flex-start;
        width:100%;
    }


</style>

<h3>Return Books</h3>

    
        
            
           <div class="flex_container">
                <!--    USERS TABLE    -->
                <div style="height:500px;overflow-y:scroll;">
                @if (bb_users == null)   { <p>Loading users...</p> }
                    else if (!bb_users.Any())  {  <p>No users available.</p>  }
                    else {
                        <table class="table">
                            <tbody>
                                @foreach (var row in bb_users)
                                {
                                string colorClass = (row == SelectedUser) ? "MyHighlightClass" : "";
                                
                                //string locator = $"editorRow{row.Id}";


                                <tr class="@colorClass" style="cursor:pointer; /*text-decoration:underline*/" @onclick="@(e => RowClick(e, row))">
                                                                                <!--https://learn.microsoft.com/en-us/answers/questions/522640/multiple-tables-on-a-single-blazor-page-->
                                        <td>@row.Id</td>
                                        <td>@row.Name</td>
                                        <td>@row.Email</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
            </div>

                <!--  BOOKS TABLE  -->
                <div style="height:5500px;overflow-y:scroll;">
                    @if (bb_books == null)
                    {
                        <p>Loading books...</p>
                    }
                    else if (!bb_books.Any())
                    {
                          <p>No books available.</p>
                    }
                    else
                    {
                        <table class="table">
                            <tbody>
                                @foreach (var row in bb_books)
                                {
                                    string colorClass = (row == SelectedBook) ? "MyHighlightClass" : "";

                                    //string locator = $"editorRow{row.Id}";


                                    <tr class="@colorClass" style="cursor:pointer; /*text-decoration:underline*/" @onclick="() => { ReturnRowData(row); SelectedBook = row;}">
                                        <td>@row.Id</td>
                                        <td>@row.Title</td>
                                        <td>@row.Author</td>
                                        <td>@row.ISBN</td>
                                        <td>@row.AvailableCopies</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>

                <div style="vertical-align: top">
                <br />
                @if (SelectedUser.Id != 0)
                {
                    <h3>Selected user #@SelectedUser.Id (  @SelectedUser.Name  ) </h3>
                }


                <br />
                User Name:
                <input @bind=editorUserName placeholder="@SelectedUser.Name"disabled/>
                <br />
                User Email:
                <br />
                <input @bind=editorUserEmail placeholder="@SelectedUser.Email"disabled/>
                <br />




                @if (SelectedBook != null && SelectedBook.Id != 0)
                {
                    <h3>Selected book</h3>
                    <br />
                    <h3>#@SelectedBook.Id (  @SelectedBook.Title  ) </h3>


                <br />
                <p>Book Title:</p>
                <input @bind=editorBookTitle placeholder="@SelectedBook.Title" disabled/>
                <br />
                <p>Book Author:</p>
                <br />
                <input @bind=editorBookAuthor placeholder="@SelectedBook.Author" disabled/>
                <br />
                <p>Book ISBN:</p>
                <br />
                <input @bind=editorBookISBN placeholder="@SelectedBook.ISBN" disabled/>
                <p>Book Available Copies:</p>
                <br />
                <div class="mb-3">
                    <label class="form-label">Amount</label>
                    <input type="number" @bind=stringBookCopies Min="0" step="1" placeholder="@SelectedBook.AvailableCopies" disabled/>
                    <span class="form-text">Tip: The amount must be at least 0.</span>
                </div>
                <div class="mb-3">Entered Amount: @stringBookCopies</div>

                }
                @if (SelectedBook == null)
                {
                    <p>loading...</p>
                }



                @if (SelectedBook == null)
                {
                    
                    <button @onclick=Cycle class="btn btn-danger" disabled>Return Book</button>
                }
                @if (SelectedBook != null)
                {

                    <button @onclick=Cycle class="btn btn-danger" >Return Book</button>
                }

                <hr />

            </div>
           </div> 
            
            
            













@*
<h3>AddBookPage</h3>
<br />
Book Title:
<input @bind=BookTitle />
<br />
Book Author:
<input @bind=BookAuthor />
<br />
Book ISBN:
<input @bind=BookISBN />
<br />

Book AvailableCopies:
<input @bind=BookAvailableCopies />
<br />



<button @onclick=SubmitBook class="btn btn-danger">Submit Book</button>
*@


@*<!--
<input @bind=OptionText2 />
<br />
<input @bind=OptionText3 />
<br />
<input @bind=OptionText4 />
<br />
-->*@

@code {
    string UserName { get; set; }
    string UserEmail { get; set; }
    int UserID { get; set; }

    string BookTitle { get; set; }
    string BookAuthor { get; set; }
    string BookISBN { get; set; }
   @*
   string BookAvailableCopies { get; set; }
   *@






    int BookID { get; set; }


    string stringBookCopies { get; set; }

    Book? SelectedBook { get; set; } = new Book();

    //    private int editorID;
    //  private string rowClass;

    string? editorBookTitle { get; set; }
    string? editorBookAuthor { get; set; }
    string? editorBookISBN { get; set; }
    int editorBookCopies { get; set; }






    private List<Book> books;
    private List<User> users;

    private List<Book> bb_books;
    private List<User> bb_users;


    User SelectedUser { get; set; } = new User();

    //    private int editorID;
    //  private string rowClass;

    string? editorUserName { get; set; }
    string? editorUserEmail { get; set; }


    //private List<Model> myModel = new List<Model>();


    void ReturnRowData(User user)
    {
        //editorUserName = String.Empty;
        //editorUserEmail = String.Empty;
        Console.WriteLine("You clicked" + user.Id);   
        Console.WriteLine("You clicked" + user.Name);
        Console.WriteLine("You clicked" + user.Email);
        editorUserName = user.Name;
        editorUserEmail = user.Email;
        UserID = user.Id;

        //SelectedBook = null;


    }






    void ReturnRowData(Book book)
    {

        Console.WriteLine("You clicked" + book.Id);
        Console.WriteLine("You clicked" + book.Title);
        Console.WriteLine("You clicked" + book.Author);
        Console.WriteLine("You clicked" + book.ISBN);
        Console.WriteLine("You clicked" + book.AvailableCopies);

        editorBookTitle = book.Title;
        editorBookAuthor = book.Author;
        editorBookISBN = book.ISBN;
        stringBookCopies = book.AvailableCopies.ToString();


        BookID = book.Id;

    }



    private async Task RowClick(MouseEventArgs e, User user)
    {
        SelectedUser = user;
        ReturnRowData(user);
        SelectedBook = null;
        bb_books = await libby.AsyncReadBorrowedBooksByUser(user);    
    }





    /// <summary>
    /// Action for the Cycle Button. Goes to
    ///
    /// </summary>
    /// <seealso href="https://stackoverflow.com/a/72396674"> Forum post </seealso>
    /// <seealso href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.navigationmanager.navigateto?view=aspnetcore-6.0"> Documentation</seealso>
    public void Cycle()
    {
        Edit();
        nav.NavigateTo("/borrowMenu", true);   // navigate to the same page, 'true' forces browser to reload

        #region unusedCode_Cycle
        //nav.Refresh();                          //<~~ works in.NET 8.0 but not .NET 6.0
        //nav.NavigateTo("/addSong");            // <~~ uses blazor's navigate injectible to go to home page after adding
        #endregion unusedCode_Cycle

    }



    //private void NotifyStateChanged() => OnChange?.Invoke();




    protected override async Task OnInitializedAsync()
    {
        //    books = await libService.GetAllBooksAsync();
        users = await libby.ReadUsersOldAsync();
        books = await libby.ReadBooksOldAsync();

        bb_users = libby.ReadBorrowUsers();
    }


   // protected override async Task OnAfterRenderAsync(bool firstRender)
   // {
   //     if (firstRender) { }
   //     else
   //     {
   //         
   //     }
   //
   // }

    public void SubmitUser()
    {


        List<User> adder = new List<User>
        {
            //make new User
            new User
                {
                    Id = libby.userInc(),
                    Name = UserName,
                    Email = UserEmail
                },
        };

        //add to service
        libby.AppendNewUser(adder);

        //clear input boxes
        UserName = String.Empty;
        UserEmail = String.Empty;
    }



    private void Edit()
    {
        //editorID = ID;
        //rowClass = $"editorRow{ID}";

        if (SelectedUser != null && SelectedBook != null)
        {
            //int bc = 0;
            Console.WriteLine("You want to edit" + SelectedUser.Id);
            Console.WriteLine("You want to edit" + SelectedBook.Id);
            //if (!string.IsNullOrEmpty(editorBookTitle)) SelectedBook.Title = editorBookTitle;
            //if (!string.IsNullOrEmpty(editorBookAuthor)) SelectedBook.Author = editorBookAuthor;
            //if (!string.IsNullOrEmpty(editorBookISBN)) SelectedBook.ISBN = editorBookISBN;
            //if (Int32.TryParse(stringBookCopies, out bc))
            //{
            //    SelectedBook.AvailableCopies = bc;
            //}


            //libby.EditBook(SelectedBook);

            libby.ReturnBook(SelectedUser, SelectedBook);
        }

        StateHasChanged();
    }









    public void SubmitBook()
    {
        
        List<Book> adder = new List<Book>
            {
                //make new User
                new Book
                    {
                        Id = libby.bookInc(),
                        Title = BookTitle,
                        Author = BookAuthor,
                        ISBN = BookISBN,
                        AvailableCopies = 1 
    @*BookAvailableCopies*@

                    },
            };

        //add to service
        libby.AppendNewBook(adder);

        //clear input boxes
        UserName = String.Empty;
        UserEmail = String.Empty;
    }


}
